Task 1-3

To complete this task, I used a version of the Rabin-Karp algorithm for 2D matrices. It has a very similar logic. First, the initial hash values are initialized, then we use a loop to go through the matrix and if we find hash matches, we additionally check them for collisions, and then run colRollingHash to further calculate the hash for the next rows

This is implemented using the following functions:

1) findPower - Function to find a ^ n & mod
2) findHash - searches for a hash on a certain number of specified rows
3) check - check when the hash is the same or if they are the same submatrices
4) colRollingHash - runs the Rolling Hash algorithm to subtract the previous values and add a new one
5) extractTopRightCorner - extracts a subarray of size K*K from the upper right corner of the matrix
6) searchPattern - searches for patterns in the matrix, returns a vector of answers. 
First, it initializes the required data, the dimensions of the matrix and the pattern, the maximum powers for the matrix and the pattern, the initial hash for the matrix, and the hash of the pattern. 
Next, it calculates the hash value for the pattern, and runs two nested loops that calculate the submatrix hash - then compares it with the pattern hash, if they are the same, then runs the CHECK function, then if we have not reached the end of the matrix, run colRollingHash to initialize the hashes in another line.

The avarage time complexity is O(N * M * K)




Task 1-3 - additional

To complete this assignment, I slightly modified the Rabin-Karp algorithm

As specified in the assignment, I had to replace the module operations with mask bitwise. Also I used a different approach to cache calculation. This approach generally has faster computational operations because it uses bit shifting instead of the usual multiplication and exponentiation. The formula for calculating the hash that I used is: 
H = (H(prev) * 2 ^ (to the desired power, usually 5) XOR new_element) & BITWISE_MASK

This formula is a type of XOR hash, it does not subtract the first element (which does not fall into the pattern during the new iteration), and thanks to the bit shift and BITWISE MASK we lose these values over time. This method is faster, but it has the disadvantage that there may be more frequent collisions than in the usual modular rolling cache. 

If you go through the functions, then 
1) computeHash - calculates the hash for a submatrix of size K*K, it does this on the principle of the formula described above
2) rollDown - updates the hash one row down. The hash value for a particular submatrix is written to the top left element. 
3) isDuplicated is the main function that combines the previous two. 
First, it checks whether the submatrix is not larger than the main matrix
Next, we check the case when k = 1, for which we simply walk through the matrix and find the duplicate.
In the main part, we first initialize the hash for our K*K corner, then initialize the initial caches for the first row (we also check that there is no duplicate there). After that, we start walking through the matrix and use the rollDown function to calculate the cache, and if it is found, we return true.
4) main - initialize the matrix, enter K, return the result

The avarage complexity is O(M * N * K)