Task 1-3

To complete this assignment, I slightly modified the Rabin-Karp algorithm

As specified in the assignment, I had to replace the module operations with mask bitwise. I accomplished this task in this assignment, but also to speed up the overall performance of this algorithm, I used a different approach to cache calculation. This approach generally has faster computational operations because it uses bit shifting instead of the usual multiplication and exponentiation. The formula for calculating the hash that I used is: 
H = (H(prev) * 2 ^ (to the desired power, usually 5) XOR new_element) & BITWISE_MASK

This formula is a type of XOR hash, it does not subtract the first element (which does not fall into the pattern during the new iteration), and thanks to the bit shift and BITWISE MASK we lose these values over time. This method is faster (and, as for me, more interesting), but it has the disadvantage that there may be more frequent collisions than in the usual modular rolling cache. (But the chance of this depends on the value of BITWISE_MASK in our case 1/(2^16))

If you go through the functions, then 
1) computeHash - calculates the hash for a submatrix of size K*K, it does this on the principle of the formula described above
2) rollDown - updates the hash one row down. The hash value for a particular submatrix is written to the top left element. 
3) isDuplicated is the main function that combines the previous two. 
First, it checks whether the submatrix is not larger than the main matrix
Next, we check the case when k = 1, for which we simply walk through the matrix and find the duplicate.
In the main part, we first initialize the hash for our K*K corner, then initialize the initial caches for the first row (we also check that there is no duplicate there). After that, we start walking through the matrix and use the rollDown function to calculate the cache, and if it is found, we return true.
4) main - initialize the matrix, enter K, return the result

So the overall complexity is:
O(K^2 + (N - K + 1)*K^2 + (M - K + 1)*(N - K + 1)*K) 

Since K^2 is relatively small compared to the last term, the dominant complexity is:
O((M - K + 1)*(N - K + 1)*K)

In best case O(M*N), worst case(K is large) O(M * N * K)